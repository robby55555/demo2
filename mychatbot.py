# Import c√°c package c·∫ßn s·ª≠ d·ª•ng
import os
from dotenv import load_dotenv
from openai import OpenAI
import streamlit as st
import time
import requests
from datetime import datetime

# Load API key t·ª´ file .env
load_dotenv('.env', override=True)
openai_api_key = os.getenv('OPENAI_API_KEY')
google_script_url = os.getenv('GOOGLE_SCRIPT_URL')  # URL c·ªßa Google Apps Script Web App
client = OpenAI(api_key = openai_api_key)

# Thi·∫øt l·∫≠p page config
st.set_page_config(
    page_title="Chat with AI Assistant",
    page_icon="ü§ñ",
    layout="centered"
)

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
if 'messages' not in st.session_state:
    st.session_state.messages = []

def get_limited_history(messages, limit=10):
    """
    H√†m gi·ªõi h·∫°n l·ªãch s·ª≠ chat v·ªõi s·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa
    Args:
        messages: L·ªãch s·ª≠ chat hi·ªán t·∫°i
        limit: S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa mu·ªën gi·ªØ l·∫°i
    Returns:
        Danh s√°ch tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n
    """
    return messages[-limit:] if len(messages) > limit else messages

def save_to_sheets(timestamp, question, answer):
    """
    H√†m ghi d·ªØ li·ªáu v√†o Google Sheets th√¥ng qua Apps Script
    Args:
        timestamp: Th·ªùi gian ghi nh·∫≠n
        question: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        answer: C√¢u tr·∫£ l·ªùi c·ªßa AI
    Returns:
        Boolean: True n·∫øu ghi th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    try:
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i
        data = {
            'timestamp': timestamp,
            'question': question,
            'answer': answer
        }
        
        # G·ª≠i POST request ƒë·∫øn Google Apps Script
        response = requests.post(google_script_url, json=data)
        
        # Ki·ªÉm tra response
        if response.status_code == 200:
            return True
        return False
    except Exception as e:
        print(f"L·ªói khi ghi v√†o Google Sheets: {str(e)}")
        return False

def chat_with_llm(message):
    """
    H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ OpenAI
    Args:
        message: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
    Returns:
        C√¢u tr·∫£ l·ªùi t·ª´ OpenAI
    """
    if not message.strip():  # Ki·ªÉm tra n·∫øu tin nh·∫Øn r·ªóng
        return None
        
    # T·∫°o danh s√°ch messages bao g·ªìm system message v√† l·ªãch s·ª≠ chat
    messages = [
        {
            "role": "system",
            "content": "You are a helpful AI assistant that provides clear and concise answers."
        }
    ]
    
    # L·∫•y l·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c gi·ªõi h·∫°n v√† th√™m v√†o messages
    for msg in get_limited_history(st.session_state.messages):
        messages.append({"role": msg["role"], "content": msg["content"]})
    
    # Th√™m tin nh·∫Øn hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
    messages.append({"role": "user", "content": message})
    
    try:
        # G·ªçi API OpenAI ƒë·ªÉ l·∫•y response
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.7,
        )
        
        response = completion.choices[0].message.content
        
        # L∆∞u v√†o Google Sheets
        timestamp = datetime.now().strftime("%d/%m/%Y - %H:%M:%S")
        save_to_sheets(timestamp, message, response)
        
        return response
        
    except Exception as e:
        return f"C√≥ l·ªói x·∫£y ra: {str(e)}"

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ t·∫°o giao di·ªán Streamlit
    """
    # Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† m√¥ t·∫£ cho ·ª©ng d·ª•ng
    st.title("Chat with AI Assistant")
    st.write("H√£y ƒë·∫∑t c√¢u h·ªèi, AI s·∫Ω tr·∫£ l·ªùi b·∫°n!")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # T·∫°o chat input
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        with st.chat_message("user"):
            st.markdown(prompt)

        # Hi·ªÉn th·ªã ƒëang x·ª≠ l√Ω
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            message_placeholder.markdown("ü§î ƒêang suy nghƒ©...")
            
            # L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ AI
            response = chat_with_llm(prompt)
            
            # C·∫≠p nh·∫≠t placeholder v·ªõi c√¢u tr·∫£ l·ªùi
            message_placeholder.markdown(response)
        
        # Th√™m c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "assistant", "content": response})

# CSS ƒë·ªÉ t√πy ch·ªânh giao di·ªán
st.markdown("""
    <style>
    .stApp {
        max-width: 800px;
        margin: 0 auto;
    }
    </style>
""", unsafe_allow_html=True)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()